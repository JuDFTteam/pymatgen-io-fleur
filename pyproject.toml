[build-system]
requires = ["flit_core >=3.5,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "pymatgen-io-fleur"
dynamic = ["version"]  # read from masci_tools/__init__.py
description= "A pymatgen add-on for IO for the fleur code."
authors = [{name = "The JuDFT team", email = "he.janssen@fz-juelich.de"}]
readme = "README.rst"
license = {file = "LICENSE"}
classifiers=[
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Development Status :: 4 - Beta",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
        "Topic :: Scientific/Engineering :: Information Analysis",
        "Topic :: Scientific/Engineering :: Physics",
        "Topic :: Scientific/Engineering :: Chemistry",
        "Topic :: Software Development :: Libraries :: Python Modules",
    ]
keywords = ['pymatgen', 'fleur']
requires-python = ">=3.8"
dependencies = [
          "pymatgen>=2022.7.8",
          "masci-tools>=0.11.3,~=0.11",
        ]

[project.optional-dependencies]
testing = [
  "pytest~=6.0",
  "pytest-cov~=3.0",
]
pre-commit = [
  "pre-commit>=2.6.0",
  "pylint~=2.12.2"
]

[project.urls]
Home = "https://github.com/JuDFTteam/pymatgen-io-fleur"
Source = "https://github.com/JuDFTteam/pymatgen-io-fleur"

[tool.flit.module]
name = "pymatgen.io.fleur"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--durations=30 --quiet --cov=pymatgen/io/fleur  --cov-report=xml"
testpaths=[
  'pymatgen'
]

[tool.pydocstyle]
ignore = ["D105","D2","D4"]
match-dir="(?!(tests)).*"

[tool.mypy]
ignore_missing_imports = true

[tool.black]
line-length = 120
target-version = ['py38']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.pylint.basic]
good-names = [
    "_",
    "x",
    "y",
    "z",
    "i",
    "j",
    "k",
]
no-docstring-rgx = "^_"
docstring-min-length = 5

[tool.pylint.classes]
exclude-protected = [
    "_asdict",
    "_fields",
    "_replace",
    "_source",
    "_make",
    "_Element",
    "_ElementTree",
    "_pprint_dict",
    "_pprint_set",
    "_dispatch"
    ]

[tool.pylint.design]
max-locals = 20

[tool.pylint.format]
max-line-length = 120

[tool.pylint.messages_control]
disable = [
    "too-few-public-methods",
    "too-many-public-methods",
    "bad-continuation",
    "wrong-import-position",
    "line-too-long",
    "locally-disabled",
    "wildcard-import",
    "locally-enabled",
    "too-many-instance-attributes",
    "fixme",
    "len-as-condition",
    "wrong-import-order",
    "import-outside-toplevel",
    "duplicate-code",
    "unnecessary-pass",
    "invalid-name",
    "unused-variable",
    "unused-argument",
    "unused-import",
    "missing-function-docstring",
    "too-many-locals",
    "too-many-branches",
    "no-self-use",
    "c-extension-no-member",
    "too-many-statements",
    "too-many-nested-blocks",
    "too-many-lines",
    "too-many-return-statements",
    "too-many-arguments",
    "pointless-string-statement",
    "no-member",
    "consider-using-f-string"
]
